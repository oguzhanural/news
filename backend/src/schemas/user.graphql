type User {
  id: ID!
  name: String!
  email: String!
  role: UserRole!
  registrationSource: RegistrationSource!
  createdAt: String!
  updatedAt: String!
}

enum UserRole {
  EDITOR
  JOURNALIST
  ADMIN
  READER
}

enum RegistrationSource {
  PUBLIC_PORTAL
  ADMIN_PORTAL
}

input RegisterUserInput {
  name: String!
  email: String!
  password: String!
  role: UserRole
  registrationSource: RegistrationSource!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
  currentPassword: String
}

input UpdateUserRoleInput {
  userId: ID!
  role: UserRole!
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  me: User!
  user(id: ID!): User
  users(role: UserRole): [User!]!
}

type Mutation {
  registerUser(input: RegisterUserInput!): AuthPayload!
  loginUser(input: LoginUserInput!): AuthPayload!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  updateUserRole(input: UpdateUserRoleInput!): User!
  deleteUser(id: ID!): Boolean!
} 
type User {
  id: ID!
  name: String!
  email: String!
  role: UserRole!
  userType: UserType!
}

enum UserRole {
  EDITOR
  JOURNALIST
  ADMIN
  READER
}

enum UserType {
  STAFF
  PUBLIC
}

input RegisterUserInput {
  name: String!
  email: String!
  password: String!
  role: UserRole
  userType: UserType
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
  role: UserRole
  userType: UserType
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  user(id: ID!): User
  users: [User!]!
}

type Mutation {
  registerUser(input: RegisterUserInput!): AuthPayload!
  loginUser(input: LoginUserInput!): AuthPayload!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
} 
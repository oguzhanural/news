type News {
  id: ID!
  title: String!
  slug: String!
  content: String!
  summary: String!
  images: [Image!]!
  category: Category!
  author: User!
  publishDate: String
  createdAt: String!
  updatedAt: String!
  status: NewsStatus!
  tags: [String!]
}

type Image {
  url: String!
  caption: String
  isMain: Boolean!
}

type Category {
  id: ID!
  name: String!
  slug: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  role: UserRole!
}

enum UserRole {
  EDITOR
  JOURNALIST
  ADMIN
}

enum NewsStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

input ImageInput {
  url: String!
  caption: String
  isMain: Boolean!
}

input CreateNewsInput {
  title: String!
  content: String!
  summary: String!
  images: [ImageInput!]!
  categoryId: ID!
  status: NewsStatus!
  tags: [String!]
}

input UpdateNewsInput {
  title: String
  content: String
  summary: String
  images: [ImageInput!]
  categoryId: ID
  status: NewsStatus
  tags: [String!]
}

type Query {
  news(id: ID!): News
  newsList(
    category: ID
    status: NewsStatus
    limit: Int
    offset: Int
  ): [News!]!
  categories: [Category!]!
}

type Mutation {
  createNews(input: CreateNewsInput!): News!
  updateNews(id: ID!, input: UpdateNewsInput!): News!
  deleteNews(id: ID!): Boolean!
} 
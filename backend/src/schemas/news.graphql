type News {
  id: ID!
  title: String!
  content: String!
  summary: String!
  slug: String!
  author: User!
  category: Category!
  status: NewsStatus!
  tags: [String!]!
  images: [NewsImage!]!
  createdAt: String!
  updatedAt: String!
}

type NewsImage {
  url: String!
  isMain: Boolean!
}

enum NewsStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

input CreateNewsInput {
  title: String!
  content: String!
  summary: String!
  categoryId: ID!
  tags: [String!]!
  images: [NewsImageInput!]!
}

input UpdateNewsInput {
  id: ID!
  title: String
  content: String
  summary: String
  categoryId: ID
  status: NewsStatus
  tags: [String!]
  images: [NewsImageInput!]
}

input NewsImageInput {
  url: String!
  isMain: Boolean!
}

input SearchNewsInput {
  query: String!
  status: NewsStatus
  categoryId: ID
  tags: [String!]
  fromDate: String
  toDate: String
  limit: Int
  offset: Int
}

type SearchNewsResult {
  news: [News!]!
  total: Int!
  hasMore: Boolean!
}

type Query {
  news(id: ID!): News!
  newsList(
    status: NewsStatus
    categoryId: ID
    limit: Int
    offset: Int
  ): [News!]!
  searchNews(input: SearchNewsInput!): SearchNewsResult!
}

type Mutation {
  createNews(input: CreateNewsInput!): News!
  updateNews(input: UpdateNewsInput!): News!
  deleteNews(id: ID!): Boolean!
} 